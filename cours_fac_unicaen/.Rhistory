airquality[, -(1:2)]
airquality[airquality$Temp > 90,]
airquality$TooWindy = airquality[airquality$Wind > 10] == TRUE
airquality$TooWindy = airquality[airquality$Wind > 10,] == TRUE
airquality$TooWindy = airquality[airquality$Wind > 10 == TRUE, ]
airquality$TooWindy = airquality$Wind > 10
airquality$TooWindy
airquality$TooWindy  ==FALSE
airquality[airquality$TooWindy  ==FALSE]
airquality[airquality$TooWindy  ==FALSE,]
airquality_privee = airquality[!is.na(airquality$Ozone),]
install.packages("ggplot2")
library("ggplot2")
qplot(Temp, Ozone, data = airquality, color = Month)
#tp2 structure de donnees
#dataFrame
mat = matrix(1:9, ncol = 3)
as.data.frame(mat)
age = c(24, 26,22)
sexe = c("H","H", "F")
love = c(TRUE, FALSE, TRUE)
enquete = data.frame(age, sexe, love)
enquete
#souhaiter que certains colonnes soient considerées comme des facteurs
sexe = factor(c("H", "H", "F"))
levels(sexe)
#labels aux colonnes
names(enquete) = c("Age", "Sexe", "Love")
enquete
#labels au lignes
row.names(enquete) = c("Jules", "Jim", "Elsa")
enquete = data.frame(Age = c(24,26,22), Sexe = c("H", "H", "F"), Love = c(TRUE, FALSE, TRUE))
enquete
summary(enquete)
enquete$Age
attach(enquete)
Age
detach(enquete)
attach(enquete)
table(Sexe) #"on obient l'effectifs de echantillons
table(Sexe, Love)
#creeons une dataFrame Basse Normandie
basnor = data.frame(region = c("Calvados", "manche", "Orne"), pop = c(664000, 489500, 29337), superficie = c(5548, 5538, 6103))
basnor
str(basnor)
basnor$region
class(basnor$region)
class(basnor$superficie)
basnor$superficie[1]
class(basnor[1])
length(basnor)
basnor[[1]]
basnor[1, 2]
basnor[2:3, 1:3]
basnor[, 2:3]
basnor
basnor[basnor$superficie < 6000,]
basnor[basnor$superficie<6000, c("region", "superficie")]
attach(basnor)
basnor[superficie < 6000, c("region", "superficie")]
mean(superficie)
var(superficie)
#lire les données
getwd()
#--------------------------------------------valeurs manquantes----------------------
u = c(31, 43, NA, 36, NA)
u
is.na(u) #pour reperer les val manqauntes
mean(u, na.rm = TRUE) #faire la moyenne en ignorant les val manquantes
#ignorer les valeurs manquantes dans un fichier
# donnees = read.table("données.txt", header = T, na.strings = "NA")
#identifer les lignes des valeurs manquantes
#donnees[!complete.cases(donnees),]
#creer un nouveau jeu de donnees sans valeur manquantes
#donnees2 = na.omit(donnees)
#-----------------------------------conditon boucle-creation de fonction----------------------
a = numeric()
vec = c(1, 3, 2, 4, 7, 5, 6, 9, 8)
if(mean(vec) > 6){
a = 1:9
}else{
a = rev(1:9)
}
a
b = numeric()
for(i in 1:8){
b[i] = vec[i] + vec[i + 1]
}
b
while(mean(vec) < 10){
vec = vec + 1
}
vec
t = 1
repeat{
t = 3 * t+1
if(t>= 15.3) break
}
t
#construire ces propres fonction
arrangement = function(n, k){
factorial(n) / factorial(n-k)
}
arrangement(7,3)
courbe = function(x){
sqrt(x + exp(x))
}
courbe(1)
moyennemat = function(x){
a = numeric()
nbcol = dim(x)[2] #nombre de colonne de la matrice
for(i in 1:nbcol){
a[i] = mean(x[,i])
}
return (a)
}
#le nombre foid ou les elements dun vecteur apparaissent dans un autre
mat = matrix(1:9, ncol = 3)
moyennemat(mat)
compter = function(a, b){
d = numeric()
for(i in 1:length(a)){
d[i] = sum(b == a[i])
}
names(d) = as.character(a)
return(d)
}
#-------------------fonction s'appliquant a des objets plus complexes
#------------------------application d'une fonction au ligne et colonnes d'une matrice
#la moyenne de cahque ligne
apply(mat, 1, mean)
couleur = c("rose", "vert", "jaune", "violet")
fleurs = c("rose", "rose", "vert", "rose", "rose", "jaune", "jaune")
compter(couleur, fleurs)
apply(mat1, 1, function(x){sum(x>5)}
#---------------application d'une fonction au element d'une liste----------------
liste = list(c(1, 2), c(3, 1, 2))
#tp2 structure de donnees
#dataFrame
mat = matrix(1:9, ncol = 3)
as.data.frame(mat)
age = c(24, 26,22)
sexe = c("H","H", "F")
love = c(TRUE, FALSE, TRUE)
enquete = data.frame(age, sexe, love)
enquete
#souhaiter que certains colonnes soient considerées comme des facteurs
sexe = factor(c("H", "H", "F"))
levels(sexe)
#labels aux colonnes
names(enquete) = c("Age", "Sexe", "Love")
enquete
#labels au lignes
row.names(enquete) = c("Jules", "Jim", "Elsa")
enquete = data.frame(Age = c(24,26,22), Sexe = c("H", "H", "F"), Love = c(TRUE, FALSE, TRUE))
enquete
summary(enquete)
enquete$Age
attach(enquete)
Age
detach(enquete)
attach(enquete)
table(Sexe) #"on obient l'effectifs de echantillons
table(Sexe, Love)
#creeons une dataFrame Basse Normandie
basnor = data.frame(region = c("Calvados", "manche", "Orne"), pop = c(664000, 489500, 29337), superficie = c(5548, 5538, 6103))
basnor
str(basnor)
basnor$region
class(basnor$region)
class(basnor$superficie)
basnor$superficie[1]
class(basnor[1])
length(basnor)
basnor[[1]]
basnor[1, 2]
basnor[2:3, 1:3]
basnor[, 2:3]
basnor
basnor[basnor$superficie < 6000,]
basnor[basnor$superficie<6000, c("region", "superficie")]
attach(basnor)
basnor[superficie < 6000, c("region", "superficie")]
mean(superficie)
var(superficie)
#lire les données
getwd()
#--------------------------------------------valeurs manquantes----------------------
u = c(31, 43, NA, 36, NA)
u
is.na(u) #pour reperer les val manqauntes
mean(u, na.rm = TRUE) #faire la moyenne en ignorant les val manquantes
#ignorer les valeurs manquantes dans un fichier
# donnees = read.table("données.txt", header = T, na.strings = "NA")
#identifer les lignes des valeurs manquantes
#donnees[!complete.cases(donnees),]
#creer un nouveau jeu de donnees sans valeur manquantes
#donnees2 = na.omit(donnees)
#-----------------------------------conditon boucle-creation de fonction----------------------
a = numeric()
vec = c(1, 3, 2, 4, 7, 5, 6, 9, 8)
if(mean(vec) > 6){
a = 1:9
}else{
a = rev(1:9)
}
a
b = numeric()
for(i in 1:8){
b[i] = vec[i] + vec[i + 1]
}
b
while(mean(vec) < 10){
vec = vec + 1
}
vec
t = 1
repeat{
t = 3 * t+1
if(t>= 15.3) break
}
t
#construire ces propres fonction
arrangement = function(n, k){
factorial(n) / factorial(n-k)
}
arrangement(7,3)
courbe = function(x){
sqrt(x + exp(x))
}
courbe(1)
moyennemat = function(x){
a = numeric()
nbcol = dim(x)[2] #nombre de colonne de la matrice
for(i in 1:nbcol){
a[i] = mean(x[,i])
}
return (a)
}
#le nombre foid ou les elements dun vecteur apparaissent dans un autre
mat = matrix(1:9, ncol = 3)
moyennemat(mat)
compter = function(a, b){
d = numeric()
for(i in 1:length(a)){
d[i] = sum(b == a[i])
}
names(d) = as.character(a)
return(d)
}
#-------------------fonction s'appliquant a des objets plus complexes
#------------------------application d'une fonction au ligne et colonnes d'une matrice
#la moyenne de cahque ligne
apply(mat, 1, mean)
couleur = c("rose", "vert", "jaune", "violet")
fleurs = c("rose", "rose", "vert", "rose", "rose", "jaune", "jaune")
compter(couleur, fleurs)
apply(mat1, 1, function(x){sum(x>5)}
#---------------application d'une fonction au element d'une liste----------------
liste = list(c(1, 2), c(3, 1, 2))
# --------------------------- Data Frame ---------------------------
# Création d'une matrice et transformation en data.frame
mat <- matrix(1:9, ncol = 3)
as.data.frame(mat)
# Données simples
age <- c(24, 26, 22)
sexe <- c("H", "H", "F")
love <- c(TRUE, FALSE, TRUE)
# Création d’un data frame
enquete <- data.frame(age, sexe, love)
# Transformer une variable en facteur
sexe <- factor(sexe)
levels(sexe)
# Renommer les colonnes
names(enquete) <- c("Age", "Sexe", "Love")
# Renommer les lignes
row.names(enquete) <- c("Jules", "Jim", "Elsa")
# Recréer le data frame (autre méthode équivalente)
enquete <- data.frame(Age = age, Sexe = sexe, Love = love,
row.names = c("Jules", "Jim", "Elsa"))
summary(enquete)
# Accès aux colonnes
enquete$Age
# Utilisation de attach/detach
attach(enquete)
Age
detach(enquete)
attach(enquete)
table(Sexe)        # Effectifs par modalité
table(Sexe, Love)  # Tableau croisé
detach(enquete)
# ------------------------ Data Frame Région ------------------------
basnor <- data.frame(
region = c("Calvados", "Manche", "Orne"),
pop = c(664000, 489500, 29337),
superficie = c(5548, 5538, 6103)
)
str(basnor)
basnor$region
class(basnor$region)
class(basnor$superficie)
basnor$superficie[1]
class(basnor[1])        # data.frame
length(basnor)          # nb de colonnes
basnor[[1]]             # colonne 1
basnor[1, 2]            # ligne 1, colonne 2
basnor[2:3, 1:3]        # sous-tableau
basnor[, 2:3]
# Filtres
basnor[basnor$superficie < 6000, ]
basnor[basnor$superficie < 6000, c("region", "superficie")]
attach(basnor)
basnor[superficie < 6000, c("region", "superficie")]
mean(superficie)
var(superficie)
detach(basnor)
# ---------------------- Valeurs manquantes ----------------------
u <- c(31, 43, NA, 36, NA)
is.na(u)
mean(u, na.rm = TRUE)
# Exemple de lecture de fichier (commenté ici)
# donnees <- read.table("données.txt", header = TRUE, na.strings = "NA")
# donnees[!complete.cases(donnees), ]
# donnees2 <- na.omit(donnees)
# ------------------- Conditions, boucles, fonctions -------------------
vec <- c(1, 3, 2, 4, 7, 5, 6, 9, 8)
# If
a <- if (mean(vec) > 6) 1:9 else rev(1:9)
a
# For
b <- numeric()
for (i in 1:(length(vec) - 1)) {
b[i] <- vec[i] + vec[i + 1]
}
b
# While
while (mean(vec) < 10) {
vec <- vec + 1
}
vec
# Repeat
t <- 1
repeat {
t <- 3 * t + 1
if (t >= 15.3) break
}
t
# ------------------- Fonctions personnalisées -------------------
arrangement <- function(n, k) {
factorial(n) / factorial(n - k)
}
arrangement(7, 3)
courbe <- function(x) {
sqrt(x + exp(x))
}
courbe(1)
moyennemat <- function(x) {
apply(x, 2, mean)
}
mat <- matrix(1:9, ncol = 3)
moyennemat(mat)
compter <- function(a, b) {
d <- numeric()
for (i in 1:length(a)) {
d[i] <- sum(b == a[i])
}
names(d) <- as.character(a)
return(d)
}
# ---------------------- apply(), sapply(), tapply() ----------------------
apply(mat, 1, mean)
couleur <- c("rose", "vert", "jaune", "violet")
fleurs <- c("rose", "rose", "vert", "rose", "rose", "jaune", "jaune")
compter(couleur, fleurs)
# Correction de la parenthèse manquante
apply(mat, 1, function(x) { sum(x > 5) })
# Liste
liste <- list(c(1, 2), c(3, 1, 2))
sapply(liste, mean)
lapply(liste, sd)
# tapply / split
tapply(Age, Sexe, mean)
split(Age, Sexe)
# -------------------- Visualisation et nettoyage --------------------
# Jeu de données intégré
data("airquality")
head(airquality)
names(airquality)
dim(airquality)
summary(airquality)
var(airquality$Temp)
sd(airquality$Temp)
# Accès lignes/colonnes
airquality[2, ]
airquality[, 3]
airquality[c(1, 2, 4), ]
airquality[3:6, ]
airquality[, -(1:2)]
# Filtrage
airquality[airquality$Temp > 90, ]
# Ajout et suppression de colonnes logiques
airquality$TooWindy <- airquality$Wind > 10
airquality[!airquality$TooWindy, ]   # lignes où TooWindy est FALSE
airquality$TooWindy <- NULL          # suppression
# Supprimer les NA dans Ozone
airquality_privee <- airquality[!is.na(airquality$Ozone), ]
# ---------------------- ggplot2 : qplot ----------------------
# install.packages("ggplot2") # si besoin
library(ggplot2)
# Nuage de points
qplot(Temp, Ozone, data = airquality, color = Month)
getwd()
setwd("C:\Users\fatou\Desktop\cours_fac_unicaen")
setwd("C:/Users/fatou/Desktop/cours_fac_unicaen")
donnees = read.csv("donneesconsommation.txt")
donnees
View(donnees)
dim(donnees)
donnees = read.table("donneesconsommation.txt", header = T)
donnees
dim(donnees)
View(donnees)
donnees = read.table("donneesconsommation.txt", header = T)
donnees
dim(donnees)
conso.dat = read.table("donneesconsommation.txt", header = T)
conso.dat
dim(conso.dat)
attach(conso.dat)
str(conso.dat)
attach(conso.dat)
str(conso.dat)
summary(conso.data)
attach(conso.dat)
str(conso.dat)
summary(conso.dat)
names(conso.dat)
conso.data$Cafe == AC
conso.dat
conso.data = read.table("donneesconsommation.txt", header = T)
conso.dat
dim(conso.dat)
attach(conso.dat)
str(conso.dat)
summary(conso.dat)
names(conso.dat)
conso.data[conso.data$Cafe == AC]
conso.data[conso.data$Cafe == AC]
conso.data[conso.data$Cafe == AC]
conso.data[conso.data$Cafe == "AC"]
conso.data[conso.data$Cafe == "AC"]
conso.data[conso.data$Cafe == "AC",]
conso.data[(conso.data$Cafe == "AC") & conso.dat$Revenu < 15000, ]
conso.data
names(conso.data)
conso.data[(conso.data$Enfants > 3) & (conso.data$Pates) > 60 & (conso.data$Revenu)]
conso.data[(conso.data$Cafe == "AC") & conso.data$Revenu < 15000, ]
conso.data[(conso.data$Enfants > 3) & (conso.data$Pates) > 60 & (conso.data$Revenu),]
f = function(m,n){
x = 1:n
y = x^m
sum(y)
}
f = function(m,n){
x = 1:n
y = x^m
sum(y)
}
fonc2 = function(x){
n = length(x)
x^(1:n) / (1:n)
}
fonc3 = function(x){
n = length(x)
(x[1:(n-2)] + x[2:(n-1)] + x[3/n]) /3
}
fonc4 = function(x){
ifelse( x >= 0, (1/10) * exp(-x / 10), 0)
}
fonc5 = function(k,n,p){
choose(n, k) * p^k * (1 -p)^(n-k)
}
f = function(m,n){
x = 1:n
y = x^m
sum(y)
}
fonc2 = function(x){
n = length(x)
x^(1:n) / (1:n)
}
fonc3 = function(x){
n = length(x)
(x[1:(n-2)] + x[2:(n-1)] + x[3/n]) /3
}
fonc4 = function(x){
ifelse( x >= 0, (1/10) * exp(-x / 10), 0)
}
fonc5 = function(k,n,p){
choose(n, k) * p^k * (1 -p)^(n-k)
}
fonc6 = function(k, lambda){
exp(-lambda) * (lambda^k / factorial(k))
}
Loop = function(n){
x = numeric()
x[1] = 0.5
for(j in 2:n)
x[j] = 1 + 0.25 * x[j-1]^2
x
}
Loop(500)
