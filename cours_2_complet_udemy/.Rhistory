"Jade", "Noah", "Sarah", "Raphaël", "Manon", "Tom", "Camille", "Ethan", "Lou", "Louis")
moyenne_generale = mean(moyenne_de_la_classe)
moyenne_generale
min(moyenne_de_la_classe)
#la plus grande
max(moyenne_de_la_classe)
moyenne_de_la_classe[moyenne_de_la_classe > moyenne_generale]
length(moyenne_de_la_classe[moyenne_de_la_classe > moyenne_generale]
)
eleve_sup_moyenne_generale = moyenne_de_la_classe[moyenne_de_la_classe > moyenne_generale]
length(eleve_sup_moyenne_generale)
nb = length(eleve_sup_moyenne_generale)
tableau_recap = c(moyenne_generale, nb, min(eleve_sup_moyenne_generale), max(eleve_sup_moyenne_generale) )
tableau_recap
names(tableau_recap) = c(moyenne_generale, nbe_detudiant,moins_bonne_note,note_la_eleve )
names(tableau_recap) = c("moyenne_generale", "nbe_detudiant", "moins_bonne_note","note_la_eleve" )
tableau_recap
max(moyenne_de_la_classe)
max(moyenne_de_la_classe[moyenne_de_la_classe])
moyenne_de_la_classe[max(moyenne_de_la_classe)]
moyenne_de_la_classe[min(moyenne_de_la_classe)]
moyenne_de_la_classe[(moyenne_de_la_classe)]
moyenne_de_la_classe[max(moyenne_de_la_classe)]
moyenne_de_la_classe[moyenne_de_la_classe == max(moyenne_de_la_classe)]
moyenne_de_la_classe == max(moyenne_de_la_classe)
sort(moyenne_de_la_classe)
sort(moyenne_de_la_classe, decreasing = TRUE)
summary(moyenne_de_la_classe)
notes = sample(1:5,15)
notes = sample(1:20,15)
notes
matrix(notes, ncol = 3, nrow = 5)
matrix(notes, ncol = 3, nrow = 5, byrow = T) #5lignes, 3colonnes
notes_2 = c(sample(1:20,10), c("a", "b", "c", "d", "e"))
notes_2
matrix(c(sample(1:20,10), c("a", "b", "c", "d", "e")), ncol = 3, nrow = 5)
#----------------------------------vecteur-------------------------------------------------
#tableau a une colonne
moyenne_de_la_classe = sample(1:20:20) #20
moyenne_de_la_classe
length(moyenne_de_la_classe) #taille
names(moyenne_de_la_classe) = c("Alice", "Lucas", "Emma", "Léo", "Chloé", "Nathan", "Inès", "Hugo", "Lina", "Gabriel",
"Jade", "Noah", "Sarah", "Raphaël", "Manon", "Tom", "Camille", "Ethan", "Lou", "Louis")
moyenne_generale = mean(moyenne_de_la_classe)
moyenne_generale
#la plus petite
petite_note = min(moyenne_de_la_classe)
#la plus grande
grande_note = max(moyenne_de_la_classe)
#combien d'eleve, on la note supérieur à la moyenne de la classe
eleve_sup_moyenne_generale = moyenne_de_la_classe[moyenne_de_la_classe > moyenne_generale]
nb = length(eleve_sup_moyenne_generale)
tableau_recap = c(moyenne_generale, nb, min(eleve_sup_moyenne_generale), max(eleve_sup_moyenne_generale) )
names(tableau_recap) = c("moyenne_generale", "nbe_detudiant", "moins_bonne_note","note_la_eleve" )
tableau_recap
moyenne_de_la_classe[moyenne_de_la_classe == max(moyenne_de_la_classe)]
moyenne_de_la_classe == max(moyenne_de_la_classe) #true false
sort(moyenne_de_la_classe, decreasing = TRUE) #du plus grand au plus petit
summary(moyenne_de_la_classe) #description statistique
#--un seul type de dpnnnéées---------------------------
#-------------------------matrice- un suel type de donnnees--------------------------------------
notes = sample(1:20,15)
matrix(notes, ncol = 3, nrow = 5) #5lignes, 3colonnes
matrix(notes, ncol = 3, nrow = 5, byrow = T) #remplir par lignes
notes_2 = c(sample(1:20,10), c("a", "b", "c", "d", "e"))
matrix(c(sample(1:20,10), c("a", "b", "c", "d", "e")), ncol = 3, nrow = 5)
notes_des_eleves = matrix(notes, ncol = 3, nrow = 5)
notes_des_eleves
notes_des_eleves = matrix(notes, ncol = 3, nrow = 5)
#----------------------------------vecteur-------------------------------------------------
#tableau a une colonne
moyenne_de_la_classe = sample(1:20:20) #20
moyenne_de_la_classe
length(moyenne_de_la_classe) #taille
names(moyenne_de_la_classe) = c("Alice", "Lucas", "Emma", "Léo", "Chloé", "Nathan", "Inès", "Hugo", "Lina", "Gabriel",
"Jade", "Noah", "Sarah", "Raphaël", "Manon", "Tom", "Camille", "Ethan", "Lou", "Louis")
moyenne_generale = mean(moyenne_de_la_classe)
moyenne_generale
#la plus petite
petite_note = min(moyenne_de_la_classe)
#la plus grande
grande_note = max(moyenne_de_la_classe)
#combien d'eleve, on la note supérieur à la moyenne de la classe
eleve_sup_moyenne_generale = moyenne_de_la_classe[moyenne_de_la_classe > moyenne_generale]
nb = length(eleve_sup_moyenne_generale)
tableau_recap = c(moyenne_generale, nb, min(eleve_sup_moyenne_generale), max(eleve_sup_moyenne_generale) )
names(tableau_recap) = c("moyenne_generale", "nbe_detudiant", "moins_bonne_note","note_la_eleve" )
tableau_recap
moyenne_de_la_classe[moyenne_de_la_classe == max(moyenne_de_la_classe)]
moyenne_de_la_classe == max(moyenne_de_la_classe) #true false
sort(moyenne_de_la_classe, decreasing = TRUE) #du plus grand au plus petit
summary(moyenne_de_la_classe) #description statistique
#--un seul type de dpnnnéées---------------------------
#-------------------------matrice- un suel type de donnnees--------------------------------------
notes = sample(1:20,15)
notes_des_eleves = matrix(notes, ncol = 3, nrow = 5)matrix(notes, ncol = 3, nrow = 5) #5lignes, 3colonnes
notes = sample(1:20,15)
matrix(notes, ncol = 3, nrow = 5) #5lignes, 3colonnes
matrix(notes, ncol = 3, nrow = 5, byrow = T) #remplir par lignes
notes_2 = c(sample(1:20,10), c("a", "b", "c", "d", "e"))
matrix(c(sample(1:20,10), c("a", "b", "c", "d", "e")), ncol = 3, nrow = 5)
notes_des_eleves = matrix(notes, ncol = 3, nrow = 5)
colnames(notes_des_eleves) = c("SVT", "MAthematiques", "Francais")
rownames(notes_des_eleves) = c("Fatou", "DIALLO", "BAH", "Aicha", "Fatima")
notes_des_eleves
notes_des_eleves[1, 1]
notes_des_eleves[,1]
notes_des_eleves[1, 2]
notes_des_eleves[1,c(2, 3)]
notes_des_eleves[1, 2:3]
notes_des_eleves["Thomas", "Francais"]
notes_des_eleves["Fatou", "Francais"]
notes_des_eleves[c("Fatou", "Aicha"), "Francais"]
notes_des_eleves[c("Aicha", "Fatou", "Francais")]
notes_des_eleves[c("Aicha", "Fatou"), "Francais")]
notes_des_eleves[c("Aicha", "Fatou"), "Francais"]
notes_des_eleves[c("Aicha", "Fatou"), "Francais"] ==c(15,10)
notes_des_eleves[c("Aicha", "Fatou"), "Francais"] = c(15,10)
notes_des_eleves
notes_des_eleves[c("Aicha", "Fatou"), "Francais"]
notes_des_eleves[3] = 15
notes[3] = 15
notes_2 = c(rep(0.5, times = 5), rep(0.9, times = 5))
notes_2
matrice_des_notes = matrix(notes_2, ncol = 3, nrow = 3)
notes_2 = c(rep(0.5, times = 5), rep(1, times= 5), rep(0.9, times = 5))
notes_2
matrice_des_notes = matrix(notes_2, ncol = 3, nrow = 5)
notes_des_eleves * matrice_des_notes
notes_des_eleves * matrice_des_notes
notes_des_eleves + matrice_des_notes
notes_des_eleves - matrice_des_notes
rowSums(notes_des_eleves)
rowMeans(notes_des_eleves)
rowSums(notes_des_eleves) #somme de chaque lignes
colSums(notes_des_eleves) #somme des colonnees
rowMeans(notes_des_eleves)
colMeans(notes_des_eleves)
install.packages("stat2Data")
library(stat2Data)
library("stat2Data")
install.packages("Stat2Data")
library("Stat2Data")
data("HorsePrices") #jeu de donnee
View(HorsePrices)
matrice_prix_cheval = as.matrix(HorsePrices[, -c(1, 5)])
matrice_prix_cheval
View(HorsePrices)
data("HorsePrices") #jeu de donnee
matrice_prix_cheval = as.matrix(HorsePrices[,-c(1,5)])
View(matrice_des_notes)
View(matrice_prix_cheval)
rownames(matrice_prix_cheval) = HorsePrices[, 1]
colnames(matrice_prix_cheval) = c("prix", "age", "taille")
matrice_prix_cheval[, 3] = matrice_prix_cheval[, 3] * 0.1016
matrice_prix_cheval[, 3] = matrice_prix_cheval[, 3] * 0.1016
matrice_prix_cheval[, 1] = matrice_prix_cheval[, 1] * 0.86
dim(matrice_prix_cheval)
summary(matrice_prix_cheval)
#enlever les NA
#supprimer toutes les lih=gnes qui contienne na
matrice_prix_cheval = na.omit(matrice_prix_cheval)
matrice_prix_cheval
dim(matrice_prix_cheval)
matrice_prix_cheval[matrice_prix_cheval[,1] == 946,]
matrice_prix_cheval[matrice_prix_cheval[,1] == 51600,]
matrice_prix_cheval[matrice_prix_cheval[,1] == 946,] = c(2500, 19, 1.651)
matrice_prix_cheval[matrice_prix_cheval[,1] == 946,]
matrice_prix_cheval[matrice_prix_cheval[,1] == 2500,]
matrice_prix_cheval[matrice_prix_cheval[,1] > 23000]
matrice_prix_cheval[matrice_prix_cheval[,1] > 23000, ]
dim(matrice_prix_cheval[matrice_prix_cheval[,1] > 23000, ])
matrice_prix_cheval[matrice_des_notes[, 3] > 1.6,]
colnames(matrice_prix_cheval[matrice_des_notes[, 3] > 1.6,])
matrice_prix_cheval[matrice_prix_cheval[,1] == 946,] = c(2500, 19, 1.651)
colnames(matrice_prix_cheval[matrice_des_notes[, 3] > 1.6,])
colnames(matrice_prix_cheval[matrice_des_notes[,3] > 1.6,])
colnames(matrice_prix_cheval[matrice_des_notes[,3]>1.6,])
matrice_prix_cheval[matrice_prix_cheval[,3]>1.6,]
matrice_prix_cheval[matrice_prix_cheval[,3] <= 1.6,]
colSums(matrice_prix_cheval)
data.frame(c(18, 24, 54,78), c(64,76,84,62), c("M", "F", "M","F"), c(TRUE, TRUE, TRUE, FALSE))
mon_data_frame = data.frame(c(18, 24, 54,78), c(64,76,84,62), c("M", "F", "M","F"), c(TRUE, TRUE, TRUE, FALSE))
colnames(mon_data_frame) = c("Age", "Poids", "Sexe", "val_bool")
rownames(mon_data_frame) = c("Jean", "Zoé", "Lucas", "Fatou")
mon_data_frame
source("C:/Users/fatou/Desktop/files.R")
# Créer un graphique en nuage de points (scatter plot)
# On représente Sepal.Length en x, Petal.Width en y
# La couleur dépend de Petal.Length, la forme dépend de l'espèce
ggplot(iris, aes(x = Sepal.Length,
y = Petal.Width,
color = Petal.Length,
shape = Species)) +
# Ajouter les points avec une taille de 3
geom_point(size = 3) +
# Définir un dégradé de couleur allant du bleu (valeurs faibles) au rouge (valeurs élevées)
scale_color_gradient(low = "blue", high = "red") +
# Appliquer un thème graphique minimaliste
theme_minimal() +
# Personnaliser l'apparence des légendes
theme(
# Modifier le titre de la légende : couleur rouge, taille 15, en gras
legend.title = element_text(colour = "red", size = 15, face = "bold"),
# Modifier le texte de la légende : noir, taille 12, italique
legend.text = element_text(colour = "black", size = 12, face = "italic"),
# Déplacer la légende en haut du graphique
legend.position = "top",
# Ajouter un fond gris clair à la légende avec une bordure en pointillés
legend.background = element_rect(fill = "grey", size = 1, linetype = "dotted")
)
# Charger la librairie ggplot2
library(ggplot2)
# Créer un graphique en nuage de points (scatter plot)
# On représente Sepal.Length en x, Petal.Width en y
# La couleur dépend de Petal.Length, la forme dépend de l'espèce
ggplot(iris, aes(x = Sepal.Length,
y = Petal.Width,
color = Petal.Length,
shape = Species)) +
# Ajouter les points avec une taille de 3
geom_point(size = 3) +
# Définir un dégradé de couleur allant du bleu (valeurs faibles) au rouge (valeurs élevées)
scale_color_gradient(low = "blue", high = "red") +
# Appliquer un thème graphique minimaliste
theme_minimal() +
# Personnaliser l'apparence des légendes
theme(
# Modifier le titre de la légende : couleur rouge, taille 15, en gras
legend.title = element_text(colour = "red", size = 15, face = "bold"),
# Modifier le texte de la légende : noir, taille 12, italique
legend.text = element_text(colour = "black", size = 12, face = "italic"),
# Déplacer la légende en haut du graphique
legend.position = "top",
# Ajouter un fond gris clair à la légende avec une bordure en pointillés
legend.background = element_rect(fill = "grey", size = 1, linetype = "dotted")
)
# Ajouter les points avec une taille de 3
geom_point(size = 3) +
# Définir un dégradé de couleur allant du bleu (valeurs faibles) au rouge (valeurs élevées)
scale_color_gradient(low = "blue", high = "red") +
# Appliquer un thème graphique minimaliste
theme_minimal() +
# Personnaliser l'apparence des légendes
theme(
# Modifier le titre de la légende : couleur rouge, taille 15, en gras
legend.title = element_text(colour = "red", size = 15, face = "bold"),
# Modifier le texte de la légende : noir, taille 12, italique
legend.text = element_text(colour = "black", size = 12, face = "italic"),
# Déplacer la légende en haut du graphique
legend.position = "top",
# Ajouter un fond gris clair à la légende avec une bordure en pointillés
legend.background = element_rect(fill = "grey", size = 1, linetype = "dotted")
)
g <- ggplot(iris, aes(x = Petal.Length, fill = Species)) + geom_histogram(color = "white", biwidth = 0.5)
g
g <- ggplot(iris, aes(x = Petal.Length, fill = Species)) + geom_histogram(color = "white", biwidth = 0.5)
g
#sauvegarder
dev.off
g <- ggplot(iris, aes(iris, aes(x = Species, y = Petal.Length, fill = Species)) + geom_boxplot()
g <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) + geom_boxplot()
g <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) + geom_boxplot()
g
fast_food = read.csv("FastFoodRestaurants.csv")
fast_food = read.csv("FastFoodRestaurants.csv")
getwd()
setwd("C:\Users\fatou\Desktop\cours_2_complet_udemy")
getwd()
setwd("C:/Users/fatou/Desktop/cours_2_complet_udemy")
fast_food = read.csv("FastFoodRestaurants.csv")
fast_food = read.csv("FastFoodRestaurants.csv")
View(fast_food)
fast_food_tibble = as_tibble(fast_food)
fast_food_tibble = as_tibble(fast_food)
library("ggplot2")
library("dplyr")
fast_food_tibble = as_tibble(fast_food)
View(fast_food_tibble)
install.packages("plotly")
library("plotly")
# ------------------------- Jeu de données iris -------------------------
# Chargement du jeu de données intégré iris
data(iris)
# Affichage d’un nuage de points : Longueur vs Largeur des sépales
plot(iris$Sepal.Length, iris$Sepal.Width,
main = "Relation entre longueur et largeur des sépales",
xlab = "Longueur des sépales",
ylab = "Largeur des sépales",
col = "blue", pch = 16)
# Autre scatter plot : Sepal.Length vs Petal.Width
plot(iris$Sepal.Length, iris$Petal.Width,
main = "Longueur des sépales vs Largeur des pétales",
xlab = "Longueur des sépales",
ylab = "Largeur des pétales",
col = "red", pch = 17)
# Définir manuellement les limites des axes pour superposition
x_min <- min(iris$Sepal.Length, iris$Petal.Length)
x_max <- max(iris$Sepal.Length, iris$Petal.Length)
y_min <- min(iris$Sepal.Width, iris$Petal.Width)
y_max <- max(iris$Sepal.Width, iris$Petal.Width)
# Superposition de sépales et pétales
plot(iris$Sepal.Length, iris$Sepal.Width,
xlab = "Longueur", ylab = "Largeur",
xlim = c(x_min, x_max), ylim = c(y_min, y_max),
col = "red", pch = 21)
points(iris$Petal.Length, iris$Petal.Width,
col = "blue", pch = 22)
legend("topright", legend = c("Sépales", "Pétales"),
col = c("red", "blue"), pch = c(21, 22))
title(main = "Longueur en fonction de la largeur", col.main = "blue")
# ------------------------- ggplot2 : Scatter plot & Histogramme -------------------------
library(ggplot2)
# Nuage de points coloré par longueur des pétales
g <- ggplot(iris, aes(x = Sepal.Length,
y = Petal.Width,
color = Petal.Length,
shape = Species)) +
geom_point(size = 3) +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(legend.title = element_text(colour = "red", size = 15, face = "bold"),
legend.text = element_text(colour = "black", size = 12, face = "italic"),
legend.position = "top",
legend.background = element_rect(fill = "grey", size = 1, linetype = "dotted")) +
xlab("Longueur pétale") + ylab("Largeur pétale") + ggtitle("Relation entre longueur et largeur des pétales")
g
# Histogramme : distribution des longueurs de pétales par espèce
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.5, color = "white") +
theme_minimal() +
ggtitle("Distribution de la longueur des pétales par espèce")
# ------------------------- Visualisation des fast-foods -------------------------
library(dplyr)
# Charger les données des restaurants fast-food
fast_food <- read.csv("FastFoodRestaurants.csv")
# Convertir en tibble pour faciliter les opérations
fast_food_tibble <- as_tibble(fast_food)
# Regrouper par ville et nom du restaurant, compter le nombre d'implantations
resum <- fast_food_tibble %>%
group_by(City, name) %>%
summarise(nombre = n(), .groups = "drop")
# ------------------------- Jeu de données iris -------------------------
# Chargement du jeu de données intégré iris
data(iris)
# Affichage d’un nuage de points : Longueur vs Largeur des sépales
plot(iris$Sepal.Length, iris$Sepal.Width,
main = "Relation entre longueur et largeur des sépales",
xlab = "Longueur des sépales",
ylab = "Largeur des sépales",
col = "blue", pch = 16)
# Autre scatter plot : Sepal.Length vs Petal.Width
plot(iris$Sepal.Length, iris$Petal.Width,
main = "Longueur des sépales vs Largeur des pétales",
xlab = "Longueur des sépales",
ylab = "Largeur des pétales",
col = "red", pch = 17)
# Définir manuellement les limites des axes pour superposition
x_min <- min(iris$Sepal.Length, iris$Petal.Length)
x_max <- max(iris$Sepal.Length, iris$Petal.Length)
y_min <- min(iris$Sepal.Width, iris$Petal.Width)
y_max <- max(iris$Sepal.Width, iris$Petal.Width)
# Superposition de sépales et pétales
plot(iris$Sepal.Length, iris$Sepal.Width,
xlab = "Longueur", ylab = "Largeur",
xlim = c(x_min, x_max), ylim = c(y_min, y_max),
col = "red", pch = 21)
points(iris$Petal.Length, iris$Petal.Width,
col = "blue", pch = 22)
legend("topright", legend = c("Sépales", "Pétales"),
col = c("red", "blue"), pch = c(21, 22))
title(main = "Longueur en fonction de la largeur", col.main = "blue")
# ------------------------- ggplot2 : Scatter plot & Histogramme -------------------------
library(ggplot2)
# Nuage de points coloré par longueur des pétales
g <- ggplot(iris, aes(x = Sepal.Length,
y = Petal.Width,
color = Petal.Length,
shape = Species)) +
geom_point(size = 3) +
scale_color_gradient(low = "blue", high = "red") +
theme_minimal() +
theme(legend.title = element_text(colour = "red", size = 15, face = "bold"),
legend.text = element_text(colour = "black", size = 12, face = "italic"),
legend.position = "top",
legend.background = element_rect(fill = "grey", size = 1, linetype = "dotted")) +
xlab("Longueur pétale") + ylab("Largeur pétale") + ggtitle("Relation entre longueur et largeur des pétales")
g
# Histogramme : distribution des longueurs de pétales par espèce
ggplot(iris, aes(x = Petal.Length, fill = Species)) +
geom_histogram(binwidth = 0.5, color = "white") +
theme_minimal() +
ggtitle("Distribution de la longueur des pétales par espèce")
# ------------------------- Visualisation des fast-foods -------------------------
library(dplyr)
# Charger les données des restaurants fast-food
fast_food <- read.csv("FastFoodRestaurants.csv")
# Convertir en tibble pour faciliter les opérations
fast_food_tibble <- as_tibble(fast_food)
# Regrouper par ville et nom du restaurant, compter le nombre d'implantations
resum <- fast_food_tibble %>%
group_by(City, name) %>%
summarise(nombre = n(), .groups = "drop")
# ------------------------- VISUALISATION EN R -------------------------
# Chargement du jeu de données intégré iris
data(iris)
# Affichage d’un nuage de points entre deux variables
# plot(x, y) : crée un graphique de dispersion (scatter plot)
plot(iris$Sepal.Length, iris$Sepal.Width,
main = "Relation entre longueur et largeur des sépales",
xlab = "Longueur des sépales",
ylab = "Largeur des sépales",
col = "blue",     # Couleur des points
pch = 16)         # Forme des points (16 = cercle plein)
# Autre graphique avec variables différentes
plot(iris$Sepal.Length, iris$Petal.Width,
main = "Longueur des sépales vs Largeur des pétales",
xlab = "Longueur des sépales",
ylab = "Largeur des pétales",
col = "red",
pch = 17)
# Définir les limites des axes (xlim, ylim)
x_min <- min(iris$Sepal.Length, iris$Petal.Width)
x_max <- max(iris$Sepal.Length, iris$Petal.Width)
y_min <- min(iris$Sepal.Width, iris$Petal.Width)
y_max <- max(iris$Sepal.Width, iris$Petal.Width)
plot(iris$Sepal.Length, iris$Petal.Width,
xlab = "Longueur des sépales",
ylab = "Largeur des pétales",
xlim = c(x_min, x_max),
ylim = c(y_min, y_max),
col = "darkgreen",
pch = 19)
# Tracer une ligne reliant les points (lines)
# ATTENTION : lines() s’utilise sur des données déjà triées si on veut que ça soit lisible
# Exemple simple : relier les points (ceci n'est pas une courbe de tendance)
# On prend les 10 premières valeurs pour un affichage plus propre
lines(iris$Sepal.Length[1:10], iris$Petal.Width[1:10],
col = "skyblue",
type = "l",   # type = "l" pour ligne
lwd = 2)      # épaisseur de la ligne
#-----------------------------------------------------------------
# Chargement du jeu de données iris
data(iris)
# Deuxième graphique plus complet
plot(
iris$Sepal.Length, iris$Sepal.Width,
xlab = "Longueur",                      # Axe des x
ylab = "Largeur",                       # Axe des y
col = "red",                            # Couleur des points (sépales)
pch = 21,                               # Forme des points
xlim = c(min(iris$Sepal.Length, iris$Petal.Length),
max(iris$Sepal.Length, iris$Petal.Length)),
ylim = c(min(iris$Sepal.Width, iris$Petal.Width),
max(iris$Sepal.Width, iris$Petal.Width))
)
# Ajouter les points des pétales par-dessus
points(iris$Petal.Length, iris$Petal.Width,
col = "blue", pch = 22)
# Ajouter un titre
title(main = "Longueur en fonction de largeur", col.main = "blue")
# Ajouter une légende
legend("topright",                        # Position automatique
legend = c("Sépales", "Pétales"),  # Texte des groupes
col = c("red", "blue"),            # Couleurs des points
pch = c(21, 22))                   # Formes des points
# Charger la librairie ggplot2
library(ggplot2)
# Créer un graphique en nuage de points (scatter plot)
# On représente Sepal.Length en x, Petal.Width en y
# La couleur dépend de Petal.Length, la forme dépend de l'espèce
ggplot(iris, aes(x = Sepal.Length,
y = Petal.Width,
color = Petal.Length,
shape = Species)) +
# Ajouter les points avec une taille de 3
geom_point(size = 3) +
# Définir un dégradé de couleur allant du bleu (valeurs faibles) au rouge (valeurs élevées)
scale_color_gradient(low = "blue", high = "red") +
# Appliquer un thème graphique minimaliste
theme_minimal() +
# Personnaliser l'apparence des légendes
theme(
# Modifier le titre de la légende : couleur rouge, taille 15, en gras
legend.title = element_text(colour = "red", size = 15, face = "bold"),
# Modifier le texte de la légende : noir, taille 12, italique
legend.text = element_text(colour = "black", size = 12, face = "italic"),
# Déplacer la légende en haut du graphique
legend.position = "top",
# Ajouter un fond gris clair à la légende avec une bordure en pointillés
legend.background = element_rect(fill = "grey", size = 1, linetype = "dotted")
)
#modification des nom et des axes et ajout dun titre au graphique
g <- g+xlab("Longueur petal") + ylab("largeur petal") + ggtitle("L et l des petales")
#histogramee
g <- ggplot(iris, aes(x = Petal.Length, fill = Species)) + geom_histogram(color = "white", biwidth = 0.5)
g
#sauvegarder
dev.off
#boxplot
g <- ggplot(iris, aes(x = Species, y = Petal.Length, fill = Species)) + geom_boxplot()
g
#excercice
library("ggplot2")
library("dplyr")
fast_food = read.csv("FastFoodRestaurants.csv")
#getwd()
#setwd("C:/Users/fatou/Desktop/cours_2_complet_udemy")
#transformer en tibble
fast_food_tibble = as_tibble(fast_food)
#afficher les villes avec plus de fasfoot
ggplotly(g)
